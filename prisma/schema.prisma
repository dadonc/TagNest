// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // isn't used, is dynamically set on startup
}

model Item {
  id                    String    @id @default(cuid())
  name                  String?
  url                   String?
  note                  String?
  getsCurrentlyImported Boolean   @default(false)
  importStep            Int       @default(-1)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  countOpened           Int       @default(0)
  file                  File?
  tags                  Tag[]
  type                  String // TODO:  "bookmark" | "image" | "video" | "pdf" | "external"| "noFile" | "audio" | "text";
  bookmark              Bookmark?
  video                 Video?
  audio                 Audio?
  text                  text?
}

model File {
  id      String   @id @default(cuid())
  path    String
  created DateTime @default(now())
  updated DateTime @default(now())
  size    Int      @default(0)
  item    Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId  String   @unique
}

model Tag {
  id        String      @id @default(cuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  item      Item[]
  videoMark VideoMark[]
}

model Bookmark {
  // item.file is the mhtml file
  id               String  @id @default(cuid())
  text             String?
  faviconPath      String?
  previewImagePath String?
  screenshotPath   String?
  item             Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId           String  @unique
}

model Audio {
  id        String      @id @default(cuid())
  duration  Float?
  item      Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    String      @unique
  marks     VideoMark[] @relation(name: "audioMarks")
  thumbTime Float? // the time of the thumbnail
  VideoMark VideoMark[]
}

model text {
  id      String @id @default(cuid())
  preview String
  words   Int    @default(0)
  item    Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId  String @unique
}

model Video {
  id           String      @id @default(cuid())
  duration     Int?
  width        Int?
  height       Int?
  aspectRatio  String?
  metaBitrate  String? // according to the video meta data
  bitrate      String? // actual bitrate
  fps          Float?
  item         Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       String      @unique
  previewMarks VideoMark[] @relation(name: "previewMarks")
  marks        VideoMark[] @relation(name: "marks")
  thumbTime    Float? // the time of the thumbnail
}

model VideoMark {
  id      String  @id @default(cuid())
  mark    Float
  Video   Video?  @relation(name: "marks", fields: [videoId], references: [id], onDelete: Cascade)
  videoId String?
  Video2  Video?  @relation(name: "previewMarks", fields: [videoId], references: [id], onDelete: Cascade)
  note    String?
  tag     Tag?    @relation(fields: [tagId], references: [id])
  tagId   String?
  audio   Audio?  @relation(name: "audioMarks", fields: [audioId], references: [id])
  audioId String?
  Audio   Audio?  @relation(fields: [audioId], references: [id])
}
